@using ErpSystem.Frontend.Web.Models.Deliveries
@model DeliveriesViewModel

@{
    ViewData["Title"] = "Доставки";
}

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @Model.ErrorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0">Управление на доставки</h1>
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#deliveryModal">
        <i class="bi bi-plus-lg me-2"></i>Нова доставка
    </button>
</div>

<div class="card">
    <div class="card-body">
        <form method="get" class="row g-3 mb-4">
            <div class="col-md-3">
                <label class="form-label">Доставчик</label>
                <select class="form-select" name="SupplierId" asp-items="Model.Suppliers">
                    <option value="">Всички доставчици</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Статус</label>
                <select class="form-select" name="Status">
                    <option value="">Всички статуси</option>
                    <option value="1" selected="@(Model.Filter.Status == DeliveryStatus.Registered)">Регистрирана</option>
                    <option value="2" selected="@(Model.Filter.Status == DeliveryStatus.InProgress)">В обработка</option>
                    <option value="3" selected="@(Model.Filter.Status == DeliveryStatus.Completed)">Завършена</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">От дата</label>
                <input type="date" class="form-control" name="FromDate" value="@(Model.Filter.FromDate?.ToString("yyyy-MM-dd"))">
            </div>
            <div class="col-md-2">
                <label class="form-label">До дата</label>
                <input type="date" class="form-control" name="ToDate" value="@(Model.Filter.ToDate?.ToString("yyyy-MM-dd"))">
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <button type="submit" class="btn btn-primary w-100">Филтрирай</button>
            </div>
        </form>

        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Номер</th>
                        <th>Доставчик</th>
                        <th>Дата на доставка</th>
                        <th>Статус</th>
                        <th>Коментар</th>
                        <th>Действия</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var delivery in Model.Deliveries)
                    {
                        <tr>
                            <td>@delivery.DeliveryNumber</td>
                            <td>@delivery.SupplierName</td>
                            <td>@delivery.DeliveryDate</td>
                            <td>
                                <span class="status-badge @GetStatusClass(delivery.Status)">
                                    @delivery.StatusName
                                </span>
                            </td>
                            <td>
                                <div class="text-truncate" style="max-width: 200px;" title="@delivery.Comment">
                                    @(string.IsNullOrEmpty(delivery.Comment) ? "-" : delivery.Comment)
                                </div>
                            </td>
                            <td>
                                <div class="dropdown">
                                    <button class="btn btn-link text-dark p-0" data-bs-toggle="dropdown" data-bs-auto-close="outside" data-bs-offset="0,5">
                                        <i class="bi bi-three-dots-vertical"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <li><a class="dropdown-item" href="#" onclick="viewDelivery('@delivery.Id')">Преглед</a></li>
                                        @if (delivery.Status == DeliveryStatus.Registered)
                                        {
                                            <li><a class="dropdown-item" href="#" onclick="startDelivery('@delivery.Id')">Започни</a></li>
                                        }
                                        @if (delivery.Status == DeliveryStatus.InProgress)
                                        {
                                            <li><a class="dropdown-item" href="#" onclick="completeDelivery('@delivery.Id')">Завърши</a></li>
                                        }
                                        @if (delivery.CanBeDeleted)
                                        {
                                            <li><a class="dropdown-item text-danger" href="#" onclick="deleteDelivery('@delivery.Id')">Изтрий</a></li>
                                        }
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-end align-items-center mt-3">
            <div class="d-flex align-items-center">
                <span class="me-2">Редове на страница:</span>
                <select class="form-select form-select-sm" style="width: auto;" onchange="changePageSize(this)">
                    <option value="25" selected="@(Model.Filter.PageSize == 25)">25</option>
                    <option value="50" selected="@(Model.Filter.PageSize == 50)">50</option>
                    <option value="100" selected="@(Model.Filter.PageSize == 100)">100</option>
                </select>
                <span class="mx-4" id="pageRange"></span>
                <div class="btn-group">
                    <a href="#" onclick="changePage(-1); return false;" 
                       class="btn btn-outline-secondary" id="prevPageBtn"
                       aria-label="Previous">
                        <i class="bi bi-chevron-left"></i>
                    </a>
                    <a href="#" onclick="changePage(1); return false;" 
                       class="btn btn-outline-secondary" id="nextPageBtn"
                       aria-label="Next">
                        <i class="bi bi-chevron-right"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delivery Modal -->
<div class="modal fade" id="deliveryModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deliveryModalTitle">Нова доставка</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="deliveryForm" class="row g-3">
                    <input type="hidden" id="deliveryId">
                    
                    <div class="col-md-6">
                        <label class="form-label">Доставчик</label>
                        <select class="form-select" id="supplierId" required asp-items="Model.Suppliers">
                            <option value="">Избери доставчик</option>
                        </select>
                    </div>
                    
                    <div class="col-md-6">
                        <label class="form-label">Дата на доставка</label>
                        <input type="date" class="form-control" id="deliveryDate" required>
                    </div>
                    
                    <div class="col-12">
                        <label class="form-label">Коментар</label>
                        <textarea class="form-control" id="comment" rows="3"></textarea>
                    </div>

                    <div class="col-12">
                        <h6 class="mb-3">Артикули</h6>
                        <div id="itemsContainer">
                            <!-- Items will be added here dynamically -->
                        </div>
                        <button type="button" class="btn btn-outline-primary mt-2" onclick="addItem()">
                            <i class="bi bi-plus-lg me-2"></i>Добави артикул
                        </button>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отказ</button>
                <button type="button" class="btn btn-primary" onclick="saveDelivery()">Запази</button>
            </div>
        </div>
    </div>
</div>

<!-- View Delivery Modal -->
<div class="modal fade" id="viewDeliveryModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Детайли за доставка</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Номер</label>
                        <p id="viewDeliveryNumber"></p>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Доставчик</label>
                        <p id="viewSupplierName"></p>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Дата на доставка</label>
                        <p id="viewDeliveryDate"></p>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Статус</label>
                        <p id="viewStatus"></p>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-bold">Обща цена</label>
                        <p id="viewTotalPrice"></p>
                    </div>
                    <div class="col-12">
                        <label class="form-label fw-bold">Коментар</label>
                        <p id="viewComment"></p>
                    </div>
                    <div class="col-12">
                        <label class="form-label fw-bold">Артикули</label>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Продукт</th>
                                        <th>SKU</th>
                                        <th>Количество</th>
                                        <th>Ед. цена</th>
                                        <th>Общо</th>
                                    </tr>
                                </thead>
                                <tbody id="viewItems"></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Потвърждение за изтриване</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Сигурни ли сте, че искате да изтриете тази доставка?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отказ</button>
                <button type="button" class="btn btn-danger" onclick="confirmDelete()">Изтрий</button>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetStatusClass(DeliveryStatus status) => status switch
    {
        DeliveryStatus.Registered => "status-pending",
        DeliveryStatus.InProgress => "status-processing",
        DeliveryStatus.Completed => "status-completed",
        _ => ""
    };
}

@section Scripts {
    <script>
        let deliveryModal;
        let viewDeliveryModal;
        let deleteModal;
        let deleteDeliveryId;
        let products = @Json.Serialize(Model.Products);
        let currentPage = @Model.Filter.Page;
        let pageSize = @Model.Filter.PageSize;
        let totalItems = @Model.TotalCount;

        document.addEventListener('DOMContentLoaded', function() {
            deliveryModal = new bootstrap.Modal(document.getElementById('deliveryModal'));
            viewDeliveryModal = new bootstrap.Modal(document.getElementById('viewDeliveryModal'));
            deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            updatePagination();
        });

        function updatePagination() {
            const start = ((currentPage - 1) * pageSize) + 1;
            const end = Math.min(start + pageSize - 1, totalItems);
            
            document.getElementById('pageRange').textContent = `${start}-${end} от ${totalItems}`;
            
            document.getElementById('prevPageBtn').classList.toggle('disabled', currentPage <= 1);
            document.getElementById('nextPageBtn').classList.toggle('disabled', end >= totalItems);
        }

        function changePage(delta) {
            const newPage = currentPage + delta;
            if (newPage < 1 || (newPage - 1) * pageSize >= totalItems) return;
            
            const url = new URL(window.location.href);
            url.searchParams.set('pageNumber', newPage);
            window.location.href = url.toString();
        }

        function changePageSize(select) {
            const url = new URL(window.location.href);
            url.searchParams.set('pageSize', select.value);
            url.searchParams.set('pageNumber', '1');
            window.location.href = url.toString();
        }

        function addItem() {
            const container = document.getElementById('itemsContainer');
            const itemIndex = container.children.length;
            
            const itemHtml = `
                <div class="row g-3 mb-3 delivery-item">
                    <div class="col-md-4">
                        <select class="form-select" name="items[${itemIndex}].productId" required>
                            <option value="">Избери продукт</option>
                            ${products.map(p => `<option value="${p.Value}">${p.Text}</option>`).join('')}
                        </select>
                    </div>
                    <div class="col-md-3">
                        <input type="number" class="form-control" name="items[${itemIndex}].quantity" placeholder="Количество" required min="1">
                    </div>
                    <div class="col-md-3">
                        <input type="number" class="form-control" name="items[${itemIndex}].unitPrice" placeholder="Ед. цена" required min="0.01" step="0.01">
                    </div>
                    <div class="col-md-2">
                        <button type="button" class="btn btn-outline-danger" onclick="this.closest('.delivery-item').remove()">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', itemHtml);
        }

        async function saveDelivery() {
            const form = document.getElementById('deliveryForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const items = [];
            document.querySelectorAll('.delivery-item').forEach(item => {
                items.push({
                    productId: item.querySelector('[name$="productId"]').value,
                    quantity: parseInt(item.querySelector('[name$="quantity"]').value),
                    unitPrice: parseFloat(item.querySelector('[name$="unitPrice"]').value)
                });
            });

            const data = {
                supplierId: document.getElementById('supplierId').value,
                deliveryDate: document.getElementById('deliveryDate').value,
                comment: document.getElementById('comment').value,
                items: items
            };

            try {
                showLoading();
                const response = await fetch('@Url.Action("Create")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });

                await handleFetchError(response);
                const result = await response.json();

                if (result.id) {
                    toastr.success('Доставката е създадена успешно');
                    deliveryModal.hide();
                    setTimeout(() => window.location.reload(), 1000);
                }
            } catch (error) {
                toastr.error(error.message);
            } finally {
                hideLoading();
            }
        }

        async function viewDelivery(id) {
            try {
                showLoading();
                const response = await fetch(`@Url.Action("GetDelivery")?id=${id}`);
                await handleFetchError(response);
                const data = await response.json();

                document.getElementById('viewDeliveryNumber').textContent = data.deliveryNumber;
                document.getElementById('viewSupplierName').textContent = data.supplierName;
                document.getElementById('viewDeliveryDate').textContent = data.deliveryDate;
                document.getElementById('viewStatus').textContent = data.statusName;
                document.getElementById('viewTotalPrice').textContent = new Intl.NumberFormat('bg-BG', { style: 'currency', currency: 'BGN' }).format(data.totalPrice);
                document.getElementById('viewComment').textContent = data.comment || '-';

                const itemsHtml = data.items.map(item => `
                    <tr>
                        <td>${item.productName}</td>
                        <td>${item.sku}</td>
                        <td>${item.quantity}</td>
                        <td>${new Intl.NumberFormat('bg-BG', { style: 'currency', currency: 'BGN' }).format(item.unitPrice)}</td>
                        <td>${new Intl.NumberFormat('bg-BG', { style: 'currency', currency: 'BGN' }).format(item.totalPrice)}</td>
                    </tr>
                `).join('');
                document.getElementById('viewItems').innerHTML = itemsHtml;
                
                viewDeliveryModal.show();
            } catch (error) {
                toastr.error(error.message);
            } finally {
                hideLoading();
            }
        }

        async function completeDelivery(id) {
            try {
                showLoading();
                const response = await fetch('@Url.Action("Complete")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id })
                });

                await handleFetchError(response);
                const result = await response.json();

                if (result.success) {
                    toastr.success('Доставката е завършена успешно');
                    setTimeout(() => window.location.reload(), 1000);
                }
            } catch (error) {
                toastr.error(error.message);
            } finally {
                hideLoading();
            }
        }

        async function startDelivery(id) {
            try {
                showLoading();
                const response = await fetch('@Url.Action("StartProgress")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id })
                });

                await handleFetchError(response);
                const result = await response.json();

                if (result.success) {
                    toastr.success('Доставката е започната успешно');
                    setTimeout(() => window.location.reload(), 1000);
                }
            } catch (error) {
                toastr.error(error.message);
            } finally {
                hideLoading();
            }
        }

        function deleteDelivery(id) {
            deleteDeliveryId = id;
            deleteModal.show();
        }

        async function confirmDelete() {
            try {
                showLoading();
                const response = await fetch('@Url.Action("Delete")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id: deleteDeliveryId })
                });

                await handleFetchError(response);
                const result = await response.json();

                if (result.success) {
                    toastr.success('Доставката е изтрита успешно');
                    deleteModal.hide();
                    setTimeout(() => window.location.reload(), 1000);
                }
            } catch (error) {
                toastr.error(error.message);
            } finally {
                hideLoading();
            }
        }

        // Reset form when modal is closed
        document.getElementById('deliveryModal').addEventListener('hidden.bs.modal', function () {
            document.getElementById('deliveryForm').reset();
            document.getElementById('itemsContainer').innerHTML = '';
        });
    </script>
} 